{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prash\\\\Desktop\\\\React\\\\ecom-clothing\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'; // import { setCurrentUser } from './redux/user/user-actions.js';\n\nimport './App.css';\nimport { HomePage } from './pages/hompage/homepage.jsx';\nimport ShopPage from './pages/shop/shop.jsx';\nimport Header from './components/header/header.jsx';\nimport SignInAndSignUpPage from './pages/sign-in-sign-up/sign-in-sign-up.jsx';\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.js\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unSubscribedFromAuth = null;\n  }\n\n  componentDidMount() {\n    currentUser = useSelector(state => {\n      return state.user.currentUser;\n    });\n    dispatch = useDispatch();\n    const {\n      setCurrentUser\n    } = this.props;\n    this.unSubscribedFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        userRef.onSnapshot(snapshot => {\n          setCurrentUser({\n            id: snapshot.id,\n            ...snapshot.data()\n          });\n        });\n      } else {\n        setCurrentUser(userAuth);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unSubscribedFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/shop\",\n      component: ShopPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => currentUser ? /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 30\n        }\n      }) : /*#__PURE__*/React.createElement(SignInAndSignUpPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 18\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // const mapDispatchToProps = dispatch => ({\n//   setCurrentUser: user => dispatch(setCurrentUser(user)),\n// });\n\n\nexport default App; // how reducer and root reducer get the user object is handled by redux internally, it is not something we can observe from our side, redux structure all this together without us seeing it\n// actually saying how user reducer and root reducer get the object is a bit misleading, it is actually all reducers that will receive the action object, root reducer job simply structure all(you can combine partially) reducer together","map":{"version":3,"sources":["C:/Users/prash/Desktop/React/ecom-clothing/src/App.js"],"names":["React","Switch","Route","Redirect","useSelector","useDispatch","HomePage","ShopPage","Header","SignInAndSignUpPage","auth","createUserProfileDocument","App","Component","unSubscribedFromAuth","componentDidMount","currentUser","state","user","dispatch","setCurrentUser","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapshot","id","data","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AAEA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,mBAAP,MAAgC,6CAAhC;AACA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,wBAAhD;;AAGA,MAAMC,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAIhCC,oBAJgC,GAIT,IAJS;AAAA;;AAQhCC,EAAAA,iBAAiB,GAAG;AAElBC,IAAAA,WAAW,GAAGZ,WAAW,CAACa,KAAK,IAAI;AACjC,aAAOA,KAAK,CAACC,IAAN,CAAWF,WAAlB;AACD,KAFwB,CAAzB;AAIAG,IAAAA,QAAQ,GAAGd,WAAW,EAAtB;AAEA,UAAM;AAAEe,MAAAA;AAAF,QAAqB,KAAKC,KAAhC;AAEA,SAAKP,oBAAL,GAA4BJ,IAAI,CAACY,kBAAL,CAAwB,MAAMC,QAAN,IAAkB;AACpE,UAAIA,QAAJ,EAAc;AACZ,cAAMC,OAAO,GAAG,MAAMb,yBAAyB,CAACY,QAAD,CAA/C;AAEAC,QAAAA,OAAO,CAACC,UAAR,CAAmBC,QAAQ,IAAI;AAC7BN,UAAAA,cAAc,CAAC;AACbO,YAAAA,EAAE,EAAED,QAAQ,CAACC,EADA;AAEb,eAAGD,QAAQ,CAACE,IAAT;AAFU,WAAD,CAAd;AAID,SALD;AAOD,OAVD,MAUO;AACLR,QAAAA,cAAc,CAACG,QAAD,CAAd;AACD;AACF,KAd2B,CAA5B;AAeD;;AAEDM,EAAAA,oBAAoB,GAAG;AACrB,SAAKf,oBAAL;AACD;;AAGDgB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAExB,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,OAAlB;AAA0B,MAAA,SAAS,EAAEC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,SAAlB;AACE,MAAA,MAAM,EAAE,MACNS,WAAW,gBAAI,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAJ,gBACR,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAFF,CADF;AAcD;;AAvD+B,C,CA2DlC;AACA;AACA;;;AAEA,eAAeJ,GAAf,C,CAEA;AAEA","sourcesContent":["import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport { useSelector, useDispatch } from 'react-redux';\n// import { setCurrentUser } from './redux/user/user-actions.js';\n\nimport './App.css';\nimport { HomePage } from './pages/hompage/homepage.jsx';\nimport ShopPage from './pages/shop/shop.jsx'\nimport Header from './components/header/header.jsx';\nimport SignInAndSignUpPage from './pages/sign-in-sign-up/sign-in-sign-up.jsx';\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.js\";\n\n\nclass App extends React.Component {\n\n\n\n  unSubscribedFromAuth = null;\n  currentUser;\n  dispatch;\n\n  componentDidMount() {\n\n    currentUser = useSelector(state => {\n      return state.user.currentUser;\n    });\n\n    dispatch = useDispatch();\n\n    const { setCurrentUser } = this.props;\n\n    this.unSubscribedFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n\n        userRef.onSnapshot(snapshot => {\n          setCurrentUser({\n            id: snapshot.id,\n            ...snapshot.data()\n          });\n        });\n\n      } else {\n        setCurrentUser(userAuth);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unSubscribedFromAuth();\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route exact path='/shop' component={ShopPage} />\n          <Route exact path='/signin'\n            render={() =>\n              currentUser ? (<Redirect to='/' />) :\n                (<SignInAndSignUpPage />)\n            } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n\n// const mapDispatchToProps = dispatch => ({\n//   setCurrentUser: user => dispatch(setCurrentUser(user)),\n// });\n\nexport default App;\n\n// how reducer and root reducer get the user object is handled by redux internally, it is not something we can observe from our side, redux structure all this together without us seeing it\n\n// actually saying how user reducer and root reducer get the object is a bit misleading, it is actually all reducers that will receive the action object, root reducer job simply structure all(you can combine partially) reducer together\n\n"]},"metadata":{},"sourceType":"module"}