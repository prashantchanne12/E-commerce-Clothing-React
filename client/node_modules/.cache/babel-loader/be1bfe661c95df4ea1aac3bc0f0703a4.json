{"ast":null,"code":"// takeEvery - Listening For Every Specific Actions\n// call - To call any external functions\n// put - Similar to dispatch\nimport { call, put, takeLatest, all } from 'redux-saga/effects';\nimport { firestore, convetCollectionSnapshotToMap } from '../../firebase/firebase';\nimport { fetchCollectionSuccess, fetchCollectionsFailure } from './shop-actions'; // Functions pauses whenever we hit yield until we call next(), then our function continues\n// redux-saga middleware runs all sagas concurrently\n// all sagas runs on async thread\n// -------- SAGA ---------\n\nexport function* fetchCollectionAsync() {\n  yield console.log('SAGA FIRED');\n\n  try {\n    const collectionRef = firestore.collection(\"collection\"); // Async call goes to the collectionRef.get()\n\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convetCollectionSnapshotToMap, snapshot); // dispatching actions object\n\n    yield put(fetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // collectionRef\n  //     .get()\n  //     .then((snapshot) => {\n  //         const collectionsMap = convetCollectionSnapshotToMap(snapshot);\n  //         dispatch(fetchCollectionSuccess(collectionsMap));\n  //     }).catch(error => {\n  //         dispatch(fetchCollectionsFailure(error.message));\n  //     });\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest('FETCH_COLLECTION_START', fetchCollectionAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["C:/Users/prash/Desktop/React/ecom-clothing/src/redux/shop/shop-saga.js"],"names":["call","put","takeLatest","all","firestore","convetCollectionSnapshotToMap","fetchCollectionSuccess","fetchCollectionsFailure","fetchCollectionAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","shopSagas"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,SAAT,EAAoBC,6BAApB,QAAyD,yBAAzD;AAEA,SAASC,sBAAT,EAAiCC,uBAAjC,QAAgE,gBAAhE,C,CAEA;AAEA;AAEA;AAEA;;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAI;AACA,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,YAArB,CAAtB,CADA,CAGA;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AAEA,UAAMC,cAAc,GAAG,MAAMf,IAAI,CAACK,6BAAD,EAAgCQ,QAAhC,CAAjC,CANA,CAOA;;AACA,UAAMZ,GAAG,CAACK,sBAAsB,CAACS,cAAD,CAAvB,CAAT;AAEH,GAVD,CAUE,OAAOC,KAAP,EAAc;AACZ,UAAMf,GAAG,CAACM,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH,GAfmC,CAkBpC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMhB,UAAU,CAAC,wBAAD,EAA2BM,oBAA3B,CAAhB;AACH;AAED,OAAO,UAAUW,SAAV,GAAsB;AACzB,QAAMhB,GAAG,CAAC,CACNH,IAAI,CAACkB,qBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["// takeEvery - Listening For Every Specific Actions\r\n// call - To call any external functions\r\n// put - Similar to dispatch\r\n\r\nimport { call, put, takeLatest, all } from 'redux-saga/effects';\r\nimport { firestore, convetCollectionSnapshotToMap } from '../../firebase/firebase';\r\n\r\nimport { fetchCollectionSuccess, fetchCollectionsFailure } from './shop-actions'\r\n\r\n// Functions pauses whenever we hit yield until we call next(), then our function continues\r\n\r\n// redux-saga middleware runs all sagas concurrently\r\n\r\n// all sagas runs on async thread\r\n\r\n// -------- SAGA ---------\r\n\r\nexport function* fetchCollectionAsync() {\r\n    yield console.log('SAGA FIRED');\r\n\r\n    try {\r\n        const collectionRef = firestore.collection(\"collection\");\r\n\r\n        // Async call goes to the collectionRef.get()\r\n        const snapshot = yield collectionRef.get();\r\n\r\n        const collectionsMap = yield call(convetCollectionSnapshotToMap, snapshot);\r\n        // dispatching actions object\r\n        yield put(fetchCollectionSuccess(collectionsMap))\r\n\r\n    } catch (error) {\r\n        yield put(fetchCollectionsFailure(error.message));\r\n    }\r\n\r\n\r\n    // collectionRef\r\n    //     .get()\r\n    //     .then((snapshot) => {\r\n    //         const collectionsMap = convetCollectionSnapshotToMap(snapshot);\r\n\r\n    //         dispatch(fetchCollectionSuccess(collectionsMap));\r\n    //     }).catch(error => {\r\n    //         dispatch(fetchCollectionsFailure(error.message));\r\n    //     });\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeLatest('FETCH_COLLECTION_START', fetchCollectionAsync)\r\n}\r\n\r\nexport function* shopSagas() {\r\n    yield all([\r\n        call(fetchCollectionsStart),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}