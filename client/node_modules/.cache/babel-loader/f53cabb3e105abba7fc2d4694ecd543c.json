{"ast":null,"code":"import{createSelector}from'reselect';// ------ INPUT SELECTOR ---------\nvar selectCart=function selectCart(state){return state.cart;};export var selectCartItems=createSelector([selectCart],function(cart){return cart.cartItems;});export var selectCartHidden=createSelector([selectCart],function(cart){return cart.hidden;});export var selectCartItemsCount=createSelector([selectCartItems],function(cartItems){return cartItems.reduce(function(acc,cartItem){return acc+cartItem.quantity;},0);});export var selectCartTotal=createSelector([selectCartItems],function(cartItems){return cartItems.reduce(function(acc,cartItem){return acc+cartItem.price*cartItem.quantity;},0);});/*\r\nreselect allows us to write these selectors in such a way so that it knows that if the properties that it's pulling from the state and using are the same in the sense that their value hasn't changed and the output of the selector is not different then it won't actually pass them into our component it'll just pass the old value and React component will know not to re render. */","map":{"version":3,"sources":["C:/Users/prash/Desktop/React/ecom-clothing/src/redux/cart/cart-selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartHidden","hidden","selectCartItemsCount","reduce","acc","cartItem","quantity","selectCartTotal","price"],"mappings":"AAAA,OAASA,cAAT,KAA+B,UAA/B,CAGA;AAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAV,EAAxB,CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAGJ,cAAc,CACzC,CAACC,UAAD,CADyC,CAEzC,SAACE,IAAD,QAAUA,CAAAA,IAAI,CAACE,SAAf,EAFyC,CAAtC,CAKP,MAAO,IAAMC,CAAAA,gBAAgB,CAAGN,cAAc,CAC1C,CAACC,UAAD,CAD0C,CAE1C,SAACE,IAAD,QAAUA,CAAAA,IAAI,CAACI,MAAf,EAF0C,CAAvC,CAKP,MAAO,IAAMC,CAAAA,oBAAoB,CAAGR,cAAc,CAC9C,CAACI,eAAD,CAD8C,CAE9C,SAAAC,SAAS,QAAIA,CAAAA,SAAS,CAACI,MAAV,CAAiB,SAACC,GAAD,CAAMC,QAAN,QAAmBD,CAAAA,GAAG,CAAGC,QAAQ,CAACC,QAAlC,EAAjB,CAA6D,CAA7D,CAAJ,EAFqC,CAA3C,CAKP,MAAO,IAAMC,CAAAA,eAAe,CAAGb,cAAc,CACzC,CAACI,eAAD,CADyC,CAEzC,SAAAC,SAAS,QAAIA,CAAAA,SAAS,CAACI,MAAV,CAAiB,SAACC,GAAD,CAAMC,QAAN,QAAmBD,CAAAA,GAAG,CAAGC,QAAQ,CAACG,KAAT,CAAiBH,QAAQ,CAACC,QAAnD,EAAjB,CAA8E,CAA9E,CAAJ,EAFgC,CAAtC,CAKP","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\n\r\n// ------ INPUT SELECTOR ---------\r\n\r\nconst selectCart = state => state.cart;\r\n\r\nexport const selectCartItems = createSelector(\r\n    [selectCart],\r\n    (cart) => cart.cartItems\r\n);\r\n\r\nexport const selectCartHidden = createSelector(\r\n    [selectCart],\r\n    (cart) => cart.hidden\r\n);\r\n\r\nexport const selectCartItemsCount = createSelector(\r\n    [selectCartItems],\r\n    cartItems => cartItems.reduce((acc, cartItem) => acc + cartItem.quantity, 0),\r\n);\r\n\r\nexport const selectCartTotal = createSelector(\r\n    [selectCartItems],\r\n    cartItems => cartItems.reduce((acc, cartItem) => acc + cartItem.price * cartItem.quantity, 0),\r\n);\r\n\r\n/*\r\nreselect allows us to write these selectors in such a way so that it knows that if the properties that it's pulling from the state and using are the same in the sense that their value hasn't changed and the output of the selector is not different then it won't actually pass them into our component it'll just pass the old value and React component will know not to re render. */"]},"metadata":{},"sourceType":"module"}