{"ast":null,"code":"// GOOGLE_SIGNIN_START\n// GOOGLE_SIGNIN_SUCCESS\n// GOOGLE_SIGNIN_FAILURE\n// EMAIL_SIGNIN_START\n// EMAIL_SIGNIN_SUCCESS\n// EMAIL_SIGNIN_FAILURE\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase';\nimport { signInSuccess, signInFailure } from './user-actions';\nexport function* getSnapshotFromUserAuth(user) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const user = yield getCurrentUser();\n    if (!user) return;\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error.message));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest('GOOGLE_SIGNIN_START', signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest('EMAIL_SIGNIN_START', signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest('CHECK_USER_SESSION', isUserAuthenticated);\n}\nexport function* onUserSignOutStart() {\n  yield takeLatest('SIGN_OUT_START');\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["C:/Users/prash/Desktop/React/ecom-clothing/src/redux/user/user-saga.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","getSnapshotFromUserAuth","user","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","onEmailSignInStart","onCheckUserSession","onUserSignOutStart","userSagas"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,yBAAhF;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,IAAlC,EAAwC;AAC3C,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMT,IAAI,CAACG,yBAAD,EAA4BK,IAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CAACO,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACQ,aAAa,CAACQ,KAAK,CAACC,OAAP,CAAd,CAAT;AAEH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAAER,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACgB,eAAL,CAAqBf,cAArB,CAAvB;AACA,UAAMK,uBAAuB,CAACC,IAAD,CAA7B;AAEH,GAJD,CAIE,OAAOM,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACQ,aAAa,CAACQ,KAAK,CAACC,OAAP,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUG,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAC/D,MAAI;AACA,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMP,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACC,IAAD,CAA7B;AAEH,GAJD,CAIE,OAAOM,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACQ,aAAa,CAACQ,KAAK,CAACC,OAAP,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUQ,mBAAV,GAAgC;AACnC,MAAI;AACA,UAAMf,IAAI,GAAG,MAAMJ,cAAc,EAAjC;AACA,QAAI,CAACI,IAAL,EAAW;AACX,UAAMD,uBAAuB,CAACC,IAAD,CAA7B;AAEH,GALD,CAKE,OAAOM,KAAP,EAAc;AACZhB,IAAAA,GAAG,CAACQ,aAAa,CAACQ,KAAK,CAACC,OAAP,CAAd,CAAH;AACH;AACJ;AAGD,OAAO,UAAUS,mBAAV,GAAgC;AACnC,QAAM3B,UAAU,CAAC,qBAAD,EAAwBmB,gBAAxB,CAAhB;AACH;AAED,OAAO,UAAUS,kBAAV,GAA+B;AAClC,QAAM5B,UAAU,CAAC,oBAAD,EAAuBqB,eAAvB,CAAhB;AACH;AAED,OAAO,UAAUQ,kBAAV,GAA+B;AAClC,QAAM7B,UAAU,CAAC,oBAAD,EAAuB0B,mBAAvB,CAAhB;AACH;AAED,OAAO,UAAUI,kBAAV,GAA+B;AAClC,QAAM9B,UAAU,CAAC,gBAAD,CAAhB;AACH;AAED,OAAO,UAAU+B,SAAV,GAAsB;AACzB,QAAM7B,GAAG,CACL,CACIC,IAAI,CAACwB,mBAAD,CADR,EAEIxB,IAAI,CAACyB,kBAAD,CAFR,EAGIzB,IAAI,CAAC0B,kBAAD,CAHR,CADK,CAAT;AAOH","sourcesContent":["// GOOGLE_SIGNIN_START\r\n// GOOGLE_SIGNIN_SUCCESS\r\n// GOOGLE_SIGNIN_FAILURE\r\n\r\n// EMAIL_SIGNIN_START\r\n// EMAIL_SIGNIN_SUCCESS\r\n// EMAIL_SIGNIN_FAILURE\r\n\r\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase';\r\n\r\nimport { signInSuccess, signInFailure } from './user-actions'\r\n\r\nexport function* getSnapshotFromUserAuth(user) {\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n    } catch (error) {\r\n        yield put(signInFailure(error.message));\r\n\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n\r\n    } catch (error) {\r\n        yield put(signInFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const user = yield getCurrentUser();\r\n        if (!user) return;\r\n        yield getSnapshotFromUserAuth(user);\r\n\r\n    } catch (error) {\r\n        put(signInFailure(error.message));\r\n    }\r\n}\r\n\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest('GOOGLE_SIGNIN_START', signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest('EMAIL_SIGNIN_START', signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest('CHECK_USER_SESSION', isUserAuthenticated);\r\n}\r\n\r\nexport function* onUserSignOutStart() {\r\n    yield takeLatest('SIGN_OUT_START')\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all(\r\n        [\r\n            call(onGoogleSignInStart),\r\n            call(onEmailSignInStart),\r\n            call(onCheckUserSession),\r\n        ]\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}