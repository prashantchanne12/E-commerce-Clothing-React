{"ast":null,"code":"// Listening For Every Specific Actions\nimport { takeEvery, call } from 'redux-saga/effects';\nimport { firestore, convetCollectionSnapshotToMap } from '../../firebase/firebase';\nimport { fetchCollectionSuccess, fetchCollectionsFailure } from './shop-actions'; // Functions pauses whenever we hit yield until we call next(), then our function continues\n// redux-saga middleware runs all sagas concurrently\n// all sagas runs on async thread\n// -------- SAGA ---------\n\nexport function* fetchCollectionAsync() {\n  yield console.log('SAGA FIRED');\n  const collectionRef = firestore.collection(\"collection\");\n  const snapshot = yield collectionRef.get();\n  const collectionsMap = yield call(convetCollectionSnapshotToMap, snapshot); // collectionRef\n  //     .get()\n  //     .then((snapshot) => {\n  //         const collectionsMap = convetCollectionSnapshotToMap(snapshot);\n  //         dispatch(fetchCollectionSuccess(collectionsMap));\n  //     }).catch(error => {\n  //         dispatch(fetchCollectionsFailure(error.message));\n  //     });\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery('FETCH_COLLECTION_START', fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:/Users/prash/Desktop/React/ecom-clothing/src/redux/shop/shop-saga.js"],"names":["takeEvery","call","firestore","convetCollectionSnapshotToMap","fetchCollectionSuccess","fetchCollectionsFailure","fetchCollectionAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","fetchCollectionsStart"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,IAApB,QAAgC,oBAAhC;AACA,SAASC,SAAT,EAAoBC,6BAApB,QAAyD,yBAAzD;AAEA,SAASC,sBAAT,EAAiCC,uBAAjC,QAAgE,gBAAhE,C,CAEA;AAEA;AAEA;AAEA;;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,YAArB,CAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,QAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACE,6BAAD,EAAgCQ,QAAhC,CAAjC,CALoC,CAQpC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACH;AAED,OAAO,UAAUG,qBAAV,GAAkC;AACrC,QAAMd,SAAS,CAAC,wBAAD,EAA2BM,oBAA3B,CAAf;AACH","sourcesContent":["// Listening For Every Specific Actions\r\nimport { takeEvery, call } from 'redux-saga/effects';\r\nimport { firestore, convetCollectionSnapshotToMap } from '../../firebase/firebase';\r\n\r\nimport { fetchCollectionSuccess, fetchCollectionsFailure } from './shop-actions'\r\n\r\n// Functions pauses whenever we hit yield until we call next(), then our function continues\r\n\r\n// redux-saga middleware runs all sagas concurrently\r\n\r\n// all sagas runs on async thread\r\n\r\n// -------- SAGA ---------\r\n\r\nexport function* fetchCollectionAsync() {\r\n    yield console.log('SAGA FIRED');\r\n\r\n    const collectionRef = firestore.collection(\"collection\");\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(convetCollectionSnapshotToMap, snapshot);\r\n\r\n\r\n    // collectionRef\r\n    //     .get()\r\n    //     .then((snapshot) => {\r\n    //         const collectionsMap = convetCollectionSnapshotToMap(snapshot);\r\n\r\n    //         dispatch(fetchCollectionSuccess(collectionsMap));\r\n    //     }).catch(error => {\r\n    //         dispatch(fetchCollectionsFailure(error.message));\r\n    //     });\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery('FETCH_COLLECTION_START', fetchCollectionAsync)\r\n}"]},"metadata":{},"sourceType":"module"}