{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBYLvvtHJ_DKoOmoqEjPEGo4yd1cm9-EnI\",\n  authDomain: \"clothing-e-commerce-6758e.firebaseapp.com\",\n  databaseURL: \"https://clothing-e-commerce-6758e.firebaseio.com\",\n  projectId: \"clothing-e-commerce-6758e\",\n  storageBucket: \"clothing-e-commerce-6758e.appspot.com\",\n  messagingSenderId: \"1017683247459\",\n  appId: \"1:1017683247459:web:c58c5e9efefbdc2f211356\",\n  measurementId: \"G-R3B0X48PB1\"\n};\nexport const createUserProfileDocument = async (userAuth, dName) => {\n  if (!userAuth) return;\n  const displayName = dName ? dName : userAuth.displayName;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const user = {\n      displayName: displayName,\n      email: userAuth.email,\n      createdAt: new Date()\n    };\n    await userRef.set(user).then(e => {\n      console.log('Added');\n    }).catch(e => {\n      console.log('Error: ', e);\n    });\n  }\n\n  return userRef;\n};\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // batch is similar to transaction ins SQL if one query in transaction is failed then whole transaction is failed\n  // Makes our code more consistant\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convetCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    // doc.data() - { title:'', items:[{},{}] }\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title: title,\n      items: items\n    };\n  }); // console.log(transformedCollection);\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubScribe = auth.onAuthStateChanged(userAuth => {\n      unsubScribe();\n      resolve(userAuth);\n    });\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n}); // export const signInWithGoogle = () => {\n//     auth.signInWithPopup(provider);\n// }\n\nexport default firebase;","map":{"version":3,"sources":["C:/Users/prash/Desktop/React/ecom-clothing/src/firebase/firebase.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","dName","displayName","userRef","firestore","doc","uid","snapshot","get","exists","user","email","createdAt","Date","set","then","e","console","log","catch","addCollectionsAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convetCollectionSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","getCurrentUser","Promise","resolve","reject","unsubScribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBYLvvtHJ_DKoOmoqEjPEGo4yd1cm9-EnI\",\r\n    authDomain: \"clothing-e-commerce-6758e.firebaseapp.com\",\r\n    databaseURL: \"https://clothing-e-commerce-6758e.firebaseio.com\",\r\n    projectId: \"clothing-e-commerce-6758e\",\r\n    storageBucket: \"clothing-e-commerce-6758e.appspot.com\",\r\n    messagingSenderId: \"1017683247459\",\r\n    appId: \"1:1017683247459:web:c58c5e9efefbdc2f211356\",\r\n    measurementId: \"G-R3B0X48PB1\"\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, dName) => {\r\n\r\n    if (!userAuth) return;\r\n\r\n    const displayName = dName ? dName : userAuth.displayName;\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapshot = await userRef.get();\r\n\r\n    if (!snapshot.exists) {\r\n\r\n        const user = {\r\n            displayName: displayName,\r\n            email: userAuth.email,\r\n            createdAt: new Date(),\r\n        }\r\n\r\n        await userRef.set(user).then(e => {\r\n            console.log('Added');\r\n        }).catch(e => {\r\n            console.log('Error: ', e);\r\n        });\r\n\r\n\r\n    }\r\n\r\n    return userRef;\r\n\r\n}\r\n\r\n\r\n\r\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n\r\n    // batch is similar to transaction ins SQL if one query in transaction is failed then whole transaction is failed\r\n    // Makes our code more consistant\r\n    const batch = firestore.batch();\r\n\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef, obj);\r\n    });\r\n\r\n    return await batch.commit();\r\n\r\n}\r\n\r\nexport const convetCollectionSnapshotToMap = (collections) => {\r\n    const transformedCollection = collections.docs.map(\r\n        doc => {\r\n            // doc.data() - { title:'', items:[{},{}] }\r\n\r\n            const { title, items } = doc.data();\r\n\r\n            return {\r\n                routeName: encodeURI(title.toLowerCase()),\r\n                id: doc.id,\r\n                title: title,\r\n                items: items,\r\n            }\r\n        }\r\n    );\r\n    // console.log(transformedCollection);\r\n\r\n    return transformedCollection.reduce((accumulator, collection) => {\r\n        accumulator[collection.title.toLowerCase()] = collection;\r\n        return accumulator;\r\n    }, {});\r\n}\r\n\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n        const unsubScribe = auth.onAuthStateChanged(userAuth => {\r\n            unsubScribe();\r\n            resolve(userAuth);\r\n        })\r\n    });\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\r\n\r\n// export const signInWithGoogle = () => {\r\n//     auth.signInWithPopup(provider);\r\n// }\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}